//Alumno: Daniel Zegarra Zegarra
//Codigo: 20183471
//Seccion: 602

//Instrucciones para la ejecución del código
//Primera opción:
//1. Descargar el archivo de extensión .java y guardarlo en la ubicación de preferencia
//2. Abrir la consola de comenados e ingresar la ubicación de la carpeta donde se guardó el archivo. Ejemplo: C:\Users\"Nombre_de_Usuario"\Desktop
//2.1 Ingresar el comando: javac AppEstadoEnlace.java --> Este comando es utilizado para compilar el codigo
//2.2 Ingresar el comando: java AppEstadoEnlace.java -> Este comando es utilizado para ejecutar el codigo

//Segunda opción: 
//1. Abrir un bloc de notas y colocar el código sacado del repositorio
//2. Guardar el documento como "NombreDeseado".java en la ubicación que se deseada.
//3. Abrir la consola de comenados e ingresar la ubicación de la carpeta donde se guardó el archivo. Ejemplo: C:\Users\"Nombre_de_Usuario"\Desktop
//3.1 Ingresar el comando: javac AppEstadoEnlace.java --> Este comando es utilizado para compilar el codigo
//3.2 Ingresar el comando: java AppEstadoEnlace.java -> Este comando es utilizado para ejecutar el codigo

//Es necesario tener instalada Java 8 o superior

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Scanner;
import java.util.ArrayList;

public class EstadoEnlace {

    int ShortestPath (int dista[], Boolean procesado[], int b) {
        // Inicializar el valor principal
        int minimo = Integer.MAX_VALUE, minimo_index = -1;
        for (int x = 0; x < b; x++) {
            if (procesado[x] == false && dista[x] <= minimo)
            {
                minimo = dista[x];
                minimo_index = x;
            }
        }

        return minimo_index;
    }

    //Funcion Imprimir
    void printSolution(int distb[], int b)
    {
        System.out.println("");
        System.out.println("");
        System.out.println("");
        System.out.println("Distancias mínimas desde origen");
        System.out.println("--------------------------------");
        System.out.println("Vértice \t\t\t Distancia desde origen");
        for (int i = 0; i < b; i++) 
        {
            System.out.println((i + 1) + " \t\t\t\t\t " + distb[i]);
        }
    }

    // Función para ejecutar Dijkstra 
    void dijkstra(int grafo1[][], int origen) 
    {
        int b = grafo1[0].length;
        int distc[] = new int[b];
        
        Boolean procesado1[] = new Boolean[b];
        // Iniciar las ditancias como infinito y  falso
        for (int i = 0; i < b; i++) 
        {
            distc[i] = Integer. MAX_VALUE;
            procesado1[i] = false;
        }
        // Distancia del vertice origen siempre 0
        distc[origen] = 0;

        // Encontrar el camino mas rapido para todos los vertices
        for (int i = 0; i < b; i++) 
        {
            int u = ShortestPath(distc, procesado1, b);
            procesado1[u] = true;
        
            for (int v = 0; v < b; v++)
            {
                if (!procesado1[v] && grafo1[u][v] != 0 && distc[u] != Integer.MAX_VALUE && distc[u] + grafo1[u][v] < distc[v]) 
                {
                    distc[v] = distc[u] + grafo1[u][v];
                }
            }
        }
        printSolution(distc, b);
    }
    
    
   public static void main(String[] args) throws IOException {
       

        Scanner in = new Scanner(System.in);
        

        //Pide vertices
        System.out.println("Ingrese Cantidad de Vertices: ");

        String V = in.next();

        int V2 = Integer.parseInt(V);

        int GRF[][] = new int[V2][V2];

        for (int x = 0; x < GRF.length; x++) {
            for (int j = 0; j < GRF[x].length; j++) {
                int p = 0;
                System.out.println("Peso entre los nodos " + x + " y " + j);
                p = Integer.parseInt(in.next());
                if (x == j) {
                    p = 0;
                }
                GRF[x][j] = p;
            }
        }

        System.out.println("");
        System.out.println("");
        System.out.println("Matriz de adyacencia");
        System.out.println("");        
        System.out.println("");

        //Imprimir la matriz de adyacencia
        for (int x = 0; x < GRF.length; x++) {
            for (int y = 0; y < GRF[x].length; y++) 
            {
            System.out.print("|" + GRF[x][y] + "|");
            }
            System.out.println("");
        }
        
        
      
        
        //Función para calcular el tiempo de ejecución
        long start = System.currentTimeMillis();
        ArrayList a = new ArrayList();
        
        //Ejecutar dijkstra para la matriz ingresada
        EstadoEnlace t = new EstadoEnlace();
        
        for(int i = 1; i<=1000000; i++)
        {
            a.add(i);
        }
        t.dijkstra(GRF, 0);
        long end = System.currentTimeMillis();
        System.out.println("");        
        System.out.println("");
        System.out.println("Tiempo de ejecución del algoritmo");
        System.out.println("----------------------------------");
        System.out.println( end - start + "  " +  "Milisegundos"); 
        }

}
